#ifndef GC_HPP
#define GC_HPP

#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <assert.h>

#include "util.hpp"

class Handle;
class RawObject;
class Object;
class FrameDescr;
class ThreadState;

// Pads object, stores gc-related info
class GcHeader {
 public:
  enum {
    kCopied
  };

  static GcHeader *fromRawObject(RawObject *wat) {
    return reinterpret_cast<GcHeader *>(
        reinterpret_cast<intptr_t>(wat) - sizeof(GcHeader));
  }

  RawObject *toRawObject() const {
    return reinterpret_cast<RawObject *>(
        reinterpret_cast<intptr_t>(this) + sizeof(*this));
  }

  template <int n>
  bool markAt() {
    return (1UL << n) & mark;
  }

  template <int n, bool p>
  void setMarkAt() {
    if (p) {
      mark |= (1UL << n);
    }
    else {
      mark &= ~(1UL << n);
    }
  }

 private:
  uint32_t mark;

  // Including gcheader
  uint32_t size;

  GcHeader *copiedTo;

  friend class ThreadState;
};

// Stores all the of runtime information
// Like capability in Haskell, ikpcb in Ikarus, etc etc..
class ThreadState {
 public:
  enum {
    kLastFrameDescrOffset,
    kFirstStackPtrOffset,
    kLastStackPtrOffset,
    kHeapPtrOffset,
    kHeapLimitOffset,
    kHeapBaseOffset,
    kHeapSizeOffset,
    kHeapFromSpaceOffset,
    kHeapToSpaceOffset,
    kHeapCopyPtrOffset,
    kLastAllocReqOffset,
    kHandleHeadOffset,
    kLastOffset
  };

  void *initGcHeader(intptr_t raw, size_t size) {
    GcHeader *h = reinterpret_cast<GcHeader *>(raw);
    h->setMarkAt<GcHeader::kCopied, false>();
    h->size = size;
    return reinterpret_cast<void *>(h->toRawObject());
  }

  // Only used by compiler code.
  void *gcAlloc(size_t size) {
    assert(Util::isAligned<4>(size));
    intptr_t res = heapPtr();
    size += sizeof(GcHeader);
    heapPtr() += size;
    if (0 &&
        heapPtr() <= heapLimit()) {
      return initGcHeader(res, size);
    }
    else {
      return gcAllocSlow(size);
    }
  }

  void *gcAllocSlow(size_t);
  void gcCollect();
  void gcScavenge(Object **);

  bool isInToSpace(GcHeader *h) {
    auto raw = reinterpret_cast<intptr_t>(h);
    return heapToSpace() <= raw && raw < heapToSpace() + heapSize();
  }

  static ThreadState &global() {
    if (!global_) {
      global_ = ThreadState::create();
    }
    return *global_;
  }

  static ThreadState *create();
  void destroy();

  template <typename T>
  T as() {
    return reinterpret_cast<T>(this);
  }

  template <int offset, typename T>
  T &at() {
    return *reinterpret_cast<T *>(as<intptr_t>() + offset);
  }

#define MK_ATTR(name, offset, type) \
  type &name() { return at<offset ## Offset * sizeof(void *), type>(); }

#define ATTR_LIST(V)                                                          \
  V(lastFrameDescr,            kLastFrameDescr,            FrameDescr *)      \
  V(firstStackPtr,             kFirstStackPtr,             intptr_t)          \
  V(lastStackPtr,              kLastStackPtr,              intptr_t)          \
  V(heapPtr,                   kHeapPtr,                   intptr_t)          \
  V(heapLimit,                 kHeapLimit,                 intptr_t)          \
  V(heapBase,                  kHeapBase,                  intptr_t)          \
  V(heapSize,                  kHeapSize,                  intptr_t)          \
  V(heapFromSpace,             kHeapFromSpace,             intptr_t)          \
  V(heapToSpace,               kHeapToSpace,               intptr_t)          \
  V(heapCopyPtr,               kHeapCopyPtr,               intptr_t)          \
  V(lastAllocReq,              kLastAllocReq,              size_t)            \
  V(handleHead,                kHandleHead,                Handle *)          \
  // Append

  ATTR_LIST(MK_ATTR);

#undef ATTR_LIST
#undef MK_ATTR

 private:
  static ThreadState *global_;
};

// Generated by codegen for each callsite.
struct FrameDescr {
};

// Used by C++-compiled code (but not by native code) to handle gc.
class Handle {
 public:
  Handle(Object *ptr) {
    initPtr(ptr);
  }

  Handle(const Handle &other) {
    initPtr(other.ptr);
  }

  Handle &operator=(const Handle &other) {
    ptr = other.ptr;
    return *this;
  }

  ~Handle() {
    prev->next = next;
    next->prev = prev;
  }

  // This
  Object *operator->() const {
    return ptr;
  }

  Object *getPtr() const {
    return ptr;
  }

  void initPtr(Object *ptr) {
    Handle *&head = ThreadState::global().handleHead();
    this->ptr = ptr;

    // insert before head
    prev = head->prev;
    next = head;

    head->prev->next = this;
    head->prev = this;
  }

 private:
  Handle();

  void initFromThreadState(ThreadState *ts) {
    ptr = NULL;
    next = prev = this;
  }

  Handle *prev, *next;
  Object *ptr;

  friend class ThreadState;
};

#endif
